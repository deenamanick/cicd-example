# Define the resource group
data "azurerm_resource_group" "my_rg" {
  name     = "myResourceGroup"
}

# Define the subnet
resource "azurerm_subnet" "my_subnet" {
  name                 = "mySubnet"
  resource_group_name  = data.azurerm_resource_group.my_rg.name
  virtual_network_name = azurerm_virtual_network.my_vnet.name
  address_prefixes     = ["10.0.1.0/24"]
}

# Define the virtual network
resource "azurerm_virtual_network" "my_vnet" {
  name                = "myVnet"
  location            = data.azurerm_resource_group.my_rg.location
  resource_group_name = data.azurerm_resource_group.my_rg.name
  address_space       = ["10.0.0.0/16"]
}

# Define the Network Security Group
resource "azurerm_network_security_group" "my_terraform_nsg" {
  name                = "myNetworkSecurityGroup"
  location            = data.azurerm_resource_group.my_rg.location
  resource_group_name = data.azurerm_resource_group.my_rg.name

  security_rule {
    name                       = "allow-ssh"
    priority                   = 100
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}

# Create multiple network interfaces for 5 VMs
resource "azurerm_network_interface" "my_terraform_nic" {
  count               = 3
  name                = "myNIC-${count.index}"
  location            = data.azurerm_resource_group.my_rg.location
  resource_group_name = data.azurerm_resource_group.my_rg.name

  ip_configuration {
    name                          = "myIPConfig-${count.index}"
    subnet_id                     = azurerm_subnet.my_subnet.id
    private_ip_address_allocation = "Dynamic"
  }
}

# Create 5 Linux virtual machines and attach network interfaces
resource "azurerm_linux_virtual_machine" "my_terraform_vm" {
  count                 = 3
  name                  = "myVM-${count.index}"
  location              = data.azurerm_resource_group.my_rg.location
  resource_group_name   = data.azurerm_resource_group.my_rg.name
  network_interface_ids = [azurerm_network_interface.my_terraform_nic[count.index].id]
  size                  = "Standard_B2s"

  os_disk {
    name                 = "myOsDisk-${count.index}"
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "0001-com-ubuntu-server-jammy"
    sku       = "22_04-lts-gen2"
    version   = "latest"
  }

  computer_name                   = "myvm-${count.index}"
  admin_username                  = "azureuser"
  disable_password_authentication = true

  admin_ssh_key {
    username   = "azureuser"
    public_key = azapi_resource_action.ssh_public_key_gen.output.publicKey
  }

  boot_diagnostics {
    storage_account_uri = azurerm_storage_account.my_storage_account.primary_blob_endpoint
  }
}

# Associate the network security group with each NIC
resource "azurerm_network_interface_security_group_association" "example" {
  count                    = 5
  network_interface_id     = azurerm_network_interface.my_terraform_nic.id
  network_security_group_id = azurerm_network_security_group.my_terraform_nsg.id
}


  # Add User Data (custom_data)
#   custom_data = base64encode(<<-EOF
# #!/bin/bash
# # Update and install required packages
# sudo apt update -y
# wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
# echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list
# sudo apt update -y
# sudo apt install temurin-17-jdk -y
# /usr/bin/java --version

# # Install Jenkins
# curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
# echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/" | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
# sudo apt-get update -y
# sudo apt-get install jenkins -y
# sudo systemctl start jenkins
# sudo systemctl status jenkins

# # Install Docker and Run SonarQube as Container
# sudo apt-get update
# sudo apt-get install ca-certificates curl gnupg lsb-release -y
# sudo install -m 0755 -d /etc/apt/keyrings
# sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
# sudo chmod a+r /etc/apt/keyrings/docker.asc

# # Add Docker Repository
# echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# # Install Docker
# sudo apt-get update
# sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
# sudo groupadd docker
# sudo usermod -aG docker ubuntu
# sudo usermod -aG docker jenkins
# sudo chmod 777 /var/run/docker.sock

# # SonarQube System Settings
# cat <<SYSCTL | sudo tee /etc/sysctl.conf
# vm.max_map_count=262144
# fs.file-max=65536
# SYSCTL
# sudo sysctl -p

# #docker compose

# sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
# sudo chmod +x /usr/local/bin/docker-compose


# # Docker Compose for SonarQube
# cat <<DOCKER_COMPOSE | sudo tee docker-compose.yml
# version: "3"
# services:
#   sonarqube:
#     image: sonarqube:community
#     depends_on:
#       - db
#     environment:
#       SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
#       SONAR_JDBC_USERNAME: sonar
#       SONAR_JDBC_PASSWORD: sonar
#     volumes:
#       - sonarqube_data:/opt/sonarqube/data
#       - sonarqube_extensions:/opt/sonarqube/extensions
#       - sonarqube_logs:/opt/sonarqube/logs
#     ports:
#       - "9000:9000"
#   db:
#     image: postgres:12
#     environment:
#       POSTGRES_USER: sonar
#       POSTGRES_PASSWORD: sonar
#     volumes:
#       - postgresql:/var/lib/postgresql
#       - postgresql_data:/var/lib/postgresql/data
# volumes:
#   sonarqube_data:
#   sonarqube_extensions:
#   sonarqube_logs:
#   postgresql:
#   postgresql_data:
# DOCKER_COMPOSE

# # Start SonarQube with Docker Compose
# docker-compose up -d

# # Install Trivy
# sudo apt-get install wget apt-transport-https gnupg lsb-release -y
# wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
# echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
# sudo apt-get update
# sudo apt-get install trivy -y

# # Install Maven
# sudo apt-get update
# sudo apt install openjdk-17-jdk -y
# sudo apt install maven -y
# EOF
#   )

